



/* ControlTag Loader for Anthropologie Global a8b67b36-0f47-4e12-8686-a42fe8588d48 */
(function(w, cs) {
  
  if (/Twitter for iPhone/.test(w.navigator.userAgent || '')) {
    return;
  }

  var debugging = /kxdebug/.test(w.location);
  var log = function() {
    
    debugging && w.console && w.console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = w.document.createElement('script');
    node.async = true;  
    node.src = url;

    
    node.onload = node.onreadystatechange = function () {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  
        callback();
      }
    };

    
    var sibling = w.document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  var config = {"app":{"name":"krux-scala-config-webservice","version":"3.42.4","schema_version":3},"confid":"vu3qlt02i","context_terms":[],"publisher":{"name":"Anthropologie Global","active":true,"uuid":"a8b67b36-0f47-4e12-8686-a42fe8588d48","version_bucket":"stable","id":5665},"params":{"link_header_bidder":false,"site_level_supertag_config":"site","recommend":false,"control_tag_pixel_throttle":100,"fingerprint":false,"optout_button_optout_text":"Browser Opt Out","user_data_timing":"load","consent_active":true,"use_central_usermatch":true,"store_realtime_segments":false,"tag_source":false,"link_hb_start_event":"ready","optout_button_optin_text":"Browser Opt In","link_hb_timeout":2000,"link_hb_adserver_subordinate":true,"optimize_realtime_segments":false,"link_hb_adserver":"dfp","target_fingerprint":false,"context_terms":true,"optout_button_id":"kx-optout-button","dfp_premium":true,"control_tag_namespace":"anthropologieglobal"},"prioritized_segments":[],"realtime_segments":[],"services":{"userdata":"//cdn.krxd.net/userdata/get","contentConnector":"https://connector.krxd.net/content_connector","stats":"//apiservices.krxd.net/stats","optout":"//cdn.krxd.net/userdata/optout/status","event":"//beacon.krxd.net/event.gif","set_optout":"https://consumer.krxd.net/consumer/optout","data":"//beacon.krxd.net/data.gif","link_hb_stats":"//beacon.krxd.net/link_bidder_stats.gif","userData":"//cdn.krxd.net/userdata/get","link_hb_mas":"https://link.krxd.net/hb","config":"//cdn.krxd.net/controltag/{{ confid }}.js","social":"//beacon.krxd.net/social.gif","addSegment":"//cdn.krxd.net/userdata/add","pixel":"//beacon.krxd.net/pixel.gif","um":"https://usermatch.krxd.net/um/v2","controltag":"//cdn.krxd.net/ctjs/controltag.js.{hash}","loopback":"https://consumer.krxd.net/consumer/tmp_cookie","remove":"https://consumer.krxd.net/consumer/remove/a8b67b36-0f47-4e12-8686-a42fe8588d48","click":"https://apiservices.krxd.net/click_tracker/track","stats_export":"//beacon.krxd.net/controltag_stats.gif","userdataApi":"//cdn.krxd.net/userdata/v1/segments/get","cookie":"//beacon.krxd.net/cookie2json","proxy":"//cdn.krxd.net/partnerjs/xdi","consent_get":"https://consumer.krxd.net/consent/get/a8b67b36-0f47-4e12-8686-a42fe8588d48","consent_set":"https://consumer.krxd.net/consent/set/a8b67b36-0f47-4e12-8686-a42fe8588d48","is_optout":"https://beacon.krxd.net/optout_check","impression":"//beacon.krxd.net/ad_impression.gif","transaction":"//beacon.krxd.net/transaction.gif","log":"//jslog.krxd.net/jslog.gif","portability":"https://consumer.krxd.net/consumer/portability/a8b67b36-0f47-4e12-8686-a42fe8588d48","set_optin":"https://consumer.krxd.net/consumer/optin","usermatch":"//beacon.krxd.net/usermatch.gif"},"experiments":[],"site":{"name":"Anthropologie US","cap":255,"id":1690778,"organization_id":5665,"uid":"vu3qlt02i"},"tags":[{"id":46456,"name":"Remove Page Attributes","content":"<script>\n(function() {\n  var att, data;\n  data = Krux.require('data');\n  for (att in data.page_attr()) {\n    data.remove(\"page_attr_\" + att);\n  }\n}).call(this);\n</script>","target":null,"target_action":"append","timing":"asap","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":[],"collects_data":true},{"id":46124,"name":"Standard DTC (new) Anthropologie","content":"<script>\n(function() {\n    /* Standard but configurable DTC */\n    var comDomain, domain, level, libUtil, pathLevel, prefix, toSet;\n    libUtil = Krux('require:util.library-tag');\n    toSet = {};\n    level = 1;\n    while (level <= Number('3')) {\n        pathLevel = Krux('scrape.url_path', level);\n        if (pathLevel) {\n            if ('true' === 'true') {\n                pathLevel = (\"\" + pathLevel).replace(\n                    /\\.(?:html?|php[0-9]?|aspx?|cfg|py)$/i, '');\n            }\n            toSet[\"page_attr_url_path_\" + level] = pathLevel;\n        }\n        level++;\n    }\n    toSet['page_attr_meta_keywords'] = Krux('scrape.meta_name', 'keywords');\n    prefix = libUtil.resolvePrefix('text', 'an',\n        'undefined');\n    toSet = Krux('prefix:attr', toSet, prefix);\n    domain = Krux('get', 'domain');\n    comDomain = domain.match(/\\.([^\\.]+\\.com)$/);\n    if (comDomain) {\n        domain = comDomain[1];\n    }\n    toSet['page_attr_domain'] = domain;\n    Krux('set', toSet);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onready","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46134,"name":"Generic DTC (cookie) - Anthropologie Only","content":"<script>\n(function() {\n    /* Generic Scrape Tag - Configurable Data Collection */\n    var _, filterValues, libUtil, prefix, scrapeConfig, toSet;\n    _ = Krux('require:underscore');\n    libUtil = Krux('require:util.library-tag');\n    toSet = {};\n    filterValues = function(val) {\n        var i, item, len, ref, str, x;\n        if (_.isArray(val)) {\n            return _.compact((function() {\n                var i, len, results;\n                results = [];\n                for (i = 0, len = val.length; i < len; i++) {\n                    item = val[i];\n                    results.push(filterValues(item));\n                }\n                return results;\n            })());\n        }\n        str = \"\" + val;\n        if (!((val != null) && str.length > 0)) {\n            return;\n        }\n        ref = libUtil.EXCLUDE_VALUES_CONFIG;\n        for (i = 0, len = ref.length; i < len; i++) {\n            x = ref[i];\n            if (str.match(x) != null) {\n                return;\n            }\n        }\n        return val;\n    };\n    scrapeConfig = function(config, type) {\n        var attr, i, len, parts, ref, results, value;\n        ref = libUtil.removeFalsyStrings(config);\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n            attr = ref[i];\n            parts = attr.split('|');\n            if (parts.length === 1 && 'cookie'.match(/(dom|javascript)/)) {\n                continue;\n            }\n            if (parts.length === 1) {\n                parts.unshift(libUtil.normalizeAttrName(parts[0]));\n            }\n            switch ('cookie') {\n                case 'get':\n                    value = filterValues(Krux('get', parts[1]));\n                    break;\n                default:\n                    value = filterValues(Krux('scrape.cookie', parts[1]));\n            }\n            if (value) {\n                results.push(toSet[type + \"_attr_\" + parts[0]] = value);\n            } else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    scrapeConfig('urbn_device_type|urbn_device_type,urbn_language|urbn_language,urbn_search_provider|urbn_search_provider,urbn_site_id|urbn_site_id', 'page');\n    scrapeConfig('urbn_channel|urbn_channel,urbn_country|urbn_country,urbn_currency|urbn_currency,urbn_data_center_id|urbn_data_center_id,urbn_edgescape_site_id|urbn_edgescape_site_id,urbn_email_signup_marketing_optin|urbn_email_signup_marketing_optin,urbn_geo_region|urbn_geo_region,urbn_has_dismissed_privacy_notice|urbn_has_dismissed_privacy_notice,urbn_inventory_pool|urbn_inventory_pool,urbn_is_loyalty|urbn_is_loyalty,urbn_mbr_a|urbn_mbr_a,urbn_mbr_b|urbn_mbr_b,urbn_mbr_market_a|urbn_mbr_market_a,urbn_mbr_market_b|urbn_mbr_market_b,urbn_loyalty_browse_event|urbn_loyalty_browse_event', 'user');\n    prefix = libUtil.resolvePrefix('text', 'an',\n        'undefined');\n    toSet = Krux('prefix:attr', toSet, prefix);\n    Krux('set', toSet);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46137,"name":"UTM page attr w/prefix Anthropologie","content":"<script>\n(function(){\n\n\tvar params = Krux('require:util').urlParams();\n\t\n\tKrux ('set', { \n\t'page_attr_an_utm_source': params.utm_source,\n\t'page_attr_an_utm_medium': params.utm_medium,\n\t'page_attr_an_utm_campaign': params.utm_campaign,\n\t'page_attr_an_utm_content': params.utm_content,\n\t'page_attr_an_utm_term': params.utm_term \n\t});\n\t\n})();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46207,"name":"UTM media (search) AN US","content":"<script>\n(function() {\n    var clickURL = Krux('get', 'url_click'),\n        _ = Krux('require:underscore'),\n        libUtil = Krux('require:util.library-tag'),\n        pixelParam, store, sent,\n        confid, campaignid, siteid;\n\n    // Function to retrieve capping info from sessionStorage\n    function get(key) {\n        try {\n            return JSON.parse(sessionStorage.getItem(key) || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Function to add capping info to sessionStorage\n    function set(key, value) {\n        try {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        } catch (e) {}\n    }\n\n    // Function to check if tag is valid by comparing aginst capping info\n    function configValidate(config) {\n        var allowedSource = libUtil.removeFalsyStrings('undefined'.toLowerCase()),\n            i = 0;\n        for (; i < store.length; i++) {\n            if (_.isEqual(store[i], config)) return false;\n        }\n        // Cater for client not using allowedSource\n        if (!allowedSource.length) allowedSource.push(config.kxsiteid.toLowerCase());\n        // Invalid if source is not in the allowed list\n        if (_.indexOf(allowedSource, config.kxsiteid.toLowerCase()) < 0) return false;\n        return true;\n    }\n\n    // Function to collect and normalize values\n    function getParameter(method, path) {\n        var value;\n\n        if (!(method && path)) return;\n\n        switch (method) {\n            case 'none':\n                break;\n            case 'text':\n                value = path;\n                break;\n            case 'get':\n                value = Krux('get', path);\n                break;\n            default:\n                value = Krux('scrape.' + method, path);\n        }\n\n        if (value && !_.isArray(value)) return ('' + value)\n            .replace(/[^a-zA-Z0-9_-]+/g, '_')\n            .replace(/_+/g, '_')\n            .replace(/^_/, '')\n            .replace(/_$/, '');\n        // Use null if no result as it is included in JSON.stringify\n        return null;\n    }\n\n    // Scrape Media Attributes\n    confid = getParameter('url_param', 'utm_kxconfid');\n    campaignid = getParameter('url_param', 'utm_campaign');\n    siteid = getParameter('url_param', 'utm_source');\n\n    // Ensure minimum requirements are met\n    if (confid && campaignid && siteid) {\n        // Use omit to remove undefined values to match validation object\n        pixelParam = _.omit({\n            'kxconfid': confid,\n            'kxcampaignid': campaignid,\n            'kxsiteid': siteid,\n            'kxadvertiserid': getParameter('none', 'undefined'),\n            'kxplacementid': getParameter('url_param', 'utm_medium'),\n            'kxadid': getParameter('url_param', 'utm_content'),\n            'kxcreativeid': getParameter('url_param', 'utm_term'),\n            'kxbrand': getParameter('none', 'undefined'),\n            'clk': 'https://beacon.krxd.net/click_landing.gif'\n        }, function(value) {\n            return !value\n        });\n\n        // Retrieve capping info\n        store = get('k_utm_store');\n\n        if (configValidate(pixelParam)) {\n            // Update capping info to prevent re-fires\n            store.push(pixelParam);\n            set('k_utm_store', store);\n            sent = Krux('require:http').pixel({\n                url: clickURL,\n                data: pixelParam\n            });\n        }\n    }\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["and",["contains","$url","utm_kxconfid=vx6rd81ts"]],["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46208,"name":"UTM media (social) AN US","content":"<script>\n(function() {\n    var clickURL = Krux('get', 'url_click'),\n        _ = Krux('require:underscore'),\n        libUtil = Krux('require:util.library-tag'),\n        pixelParam, store, sent,\n        confid, campaignid, siteid;\n\n    // Function to retrieve capping info from sessionStorage\n    function get(key) {\n        try {\n            return JSON.parse(sessionStorage.getItem(key) || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Function to add capping info to sessionStorage\n    function set(key, value) {\n        try {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        } catch (e) {}\n    }\n\n    // Function to check if tag is valid by comparing aginst capping info\n    function configValidate(config) {\n        var allowedSource = libUtil.removeFalsyStrings('undefined'.toLowerCase()),\n            i = 0;\n        for (; i < store.length; i++) {\n            if (_.isEqual(store[i], config)) return false;\n        }\n        // Cater for client not using allowedSource\n        if (!allowedSource.length) allowedSource.push(config.kxsiteid.toLowerCase());\n        // Invalid if source is not in the allowed list\n        if (_.indexOf(allowedSource, config.kxsiteid.toLowerCase()) < 0) return false;\n        return true;\n    }\n\n    // Function to collect and normalize values\n    function getParameter(method, path) {\n        var value;\n\n        if (!(method && path)) return;\n\n        switch (method) {\n            case 'none':\n                break;\n            case 'text':\n                value = path;\n                break;\n            case 'get':\n                value = Krux('get', path);\n                break;\n            default:\n                value = Krux('scrape.' + method, path);\n        }\n\n        if (value && !_.isArray(value)) return ('' + value)\n            .replace(/[^a-zA-Z0-9_-]+/g, '_')\n            .replace(/_+/g, '_')\n            .replace(/^_/, '')\n            .replace(/_$/, '');\n        // Use null if no result as it is included in JSON.stringify\n        return null;\n    }\n\n    // Scrape Media Attributes\n    confid = getParameter('url_param', 'utm_kxconfid');\n    campaignid = getParameter('url_param', 'utm_campaign');\n    siteid = getParameter('url_param', 'utm_source');\n\n    // Ensure minimum requirements are met\n    if (confid && campaignid && siteid) {\n        // Use omit to remove undefined values to match validation object\n        pixelParam = _.omit({\n            'kxconfid': confid,\n            'kxcampaignid': campaignid,\n            'kxsiteid': siteid,\n            'kxadvertiserid': getParameter('none', 'undefined'),\n            'kxplacementid': getParameter('url_param', 'utm_medium'),\n            'kxadid': getParameter('url_param', 'utm_content'),\n            'kxcreativeid': getParameter('url_param', 'utm_term'),\n            'kxbrand': getParameter('none', 'undefined'),\n            'clk': 'https://beacon.krxd.net/click_landing.gif'\n        }, function(value) {\n            return !value\n        });\n\n        // Retrieve capping info\n        store = get('k_utm_store');\n\n        if (configValidate(pixelParam)) {\n            // Update capping info to prevent re-fires\n            store.push(pixelParam);\n            set('k_utm_store', store);\n            sent = Krux('require:http').pixel({\n                url: clickURL,\n                data: pixelParam\n            });\n        }\n    }\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["and",["contains","$url","utm_kxconfid=vx6re1853"]],["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46294,"name":"Data Layer Whitelist AN","content":"<script>\n(function() {\n    /* Selective Attribute DataLayer Library Tag */\n    var _, allAttr, allowedList, attr, attributes, dataLayerIngester, dataObj,\n        isAllowed, keepCase, libUtil, omitKeys, pageAttr, prefix, toSet, trim,\n        userAttr, util, value,\n        hasProp = {}.hasOwnProperty;\n    _ = Krux('require:underscore');\n    util = Krux('require:util');\n    libUtil = Krux('require:util.library-tag');\n    dataLayerIngester = Krux('require:scrape').ingestDataLayer;\n\n    /* Safe copy of dataLayer object */\n    dataObj = Krux('scrape.javascript', 'urbn.vendor');\n\n    /* String trimming helper function */\n    trim = function(attr) {\n        return (\"\" + attr).replace(/^\\s+|\\s+$/g, '');\n    };\n\n    /* Attribute configs */\n    pageAttr = _.map('afterpay_status,category_id,customer_build_version,page_id,page_type,product_available_petite,product_backinstock,product_backordered,product_brand,product_category,product_default_category,product_has_video,product_id,product_is_custom,product_is_flat_rate,product_is_marketplace,product_is_mto,product_is_parent,product_is_preorder,product_is_vintage,product_markdown_state,product_name,product_online_exclusive,product_pickup_eligible,product_quickship,product_quickshop,product_sale_item,product_seller_name,product_ship_restrictions,product_sku,product_sold_out,product_style_number,ready_to_ship,page_breadcrumb,cart_apple_pay_urbn_capable,checkout_step,customer_apple_pay_hardware,customer_apple_pay_versioncustomer_is_call_center ,page_name,product_custom_made,product_delivery_method,product_is_giftcard,product_is_out_of_stock,product_list_address ,product_partial_reservation,product_registry_id,product_review_count,product_stock_level,product_store_pickup,product_timeframe_pickup,product_wishlist_id,order_billing_same_as_shipping,order_collect_point_id,order_collect_point_timeframe_pickup,order_collect_point_vendor_id,order_currency,order_payment_type,order_promo_code,customer_countrycustomer_city,customer_state,customer_postal_code,pool_id,order_shipping_type,order_is_sca,product_availability_status'.split(','), trim);\n    userAttr = _.map('customer_auth_status,customer_bandwidth,customer_is_employee'.split(','), trim);\n\n    /* Create a array of attributes striping any empty strings */\n    allAttr = _.without(pageAttr.concat(userAttr), '');\n\n    /* Configuration settings */\n    keepCase = 'false' === 'true';\n    omitKeys = 'undefined'.split(',');\n\n    /* Resolve Prefix */\n    prefix = libUtil.resolvePrefix('text', 'an',\n        'undefined');\n\n    /* Function to varify if attribute should be used */\n    isAllowed = function(value, whitelist) {\n        var i, len, str, x;\n        str = \"\" + value;\n        if (!((value != null) && str.length > 0)) {\n            return false;\n        }\n        for (i = 0, len = whitelist.length; i < len; i++) {\n            x = whitelist[i];\n            if (value.match(x) != null) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /* Get a full list of attributes usting the dataLayer tool */\n    attributes = dataLayerIngester(dataObj, {\n        omitKeys: libUtil.removeFalsyStrings(omitKeys.concat(libUtil.EXCLUDE_KEYS_CONFIG)),\n        omitValues: libUtil.EXCLUDE_VALUES_CONFIG,\n        caseSensitive: keepCase,\n        useFullPath: 'false' === 'true',\n        useLastValue: 'false' === 'true',\n        customDelimited: [/./],\n        altDelimiter: ',',\n        userKeys: _.map(userAttr, function(exp) {\n            return new RegExp(\"(^|\\\\.)\" + exp + \"$\");\n        }),\n        optimizeNames: true\n    });\n\n    /* Only set Attributes in the allowed list */\n    allowedList = _.map(allAttr, function(name) {\n        return new RegExp(\"(_attr_|_attr_\" + prefix + \"|\\\\.)\" + (keepCase ?\n            name : libUtil.normalizeAttrName(name, {\n                removeDot: false\n            })) + \"$\");\n    });\n    toSet = {};\n    for (attr in attributes) {\n        if (!hasProp.call(attributes, attr)) continue;\n        value = attributes[attr];\n        if (isAllowed(attr, allowedList)) {\n            toSet[attr] = value;\n        }\n    }\n    toSet = Krux('prefix:attr', toSet, prefix);\n    Krux('set', toSet);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46352,"name":"DTC - Email User ID","content":"<script>\n(function() {\n    /* Email ID Scraper */\n    var algorithm, id, idType, obj, toSet;\n    idType = 'email';\n    algorithm = 'sha256';\n    switch ('javascript') {\n        case 'get':\n            id = Krux('get', 'urbn.vendor.customer_email');\n            break;\n        default:\n            id = Krux('scrape.javascript', 'urbn.vendor.customer_email');\n    }\n    if (typeof id !== 'string') {\n        return;\n    }\n    if (/^.+@./.test(id)) {\n        algorithm = 'sha256';\n        id = Krux('scrape.email_sha256', id);\n    }\n    toSet = (\n        obj = {},\n        obj[\"user_attr_\" + idType + \"_\" + algorithm] = id,\n        obj\n    );\n    Krux('set', toSet);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true},{"id":46472,"name":"Data Layer Whitelist (user ids)","content":"<script>\n(function() {\n    /* Selective Attribute DataLayer Library Tag */\n    var _, allAttr, allowedList, attr, attributes, dataLayerIngester, dataObj,\n        isAllowed, keepCase, libUtil, omitKeys, pageAttr, prefix, toSet, trim,\n        userAttr, util, value,\n        hasProp = {}.hasOwnProperty;\n    _ = Krux('require:underscore');\n    util = Krux('require:util');\n    libUtil = Krux('require:util.library-tag');\n    dataLayerIngester = Krux('require:scrape').ingestDataLayer;\n\n    /* Safe copy of dataLayer object */\n    dataObj = Krux('scrape.javascript', 'urbn.vendor');\n\n    /* String trimming helper function */\n    trim = function(attr) {\n        return (\"\" + attr).replace(/^\\s+|\\s+$/g, '');\n    };\n\n    /* Attribute configs */\n    pageAttr = _.map('undefined'.split(','), trim);\n    userAttr = _.map('customer_id,customer_session,customer_sterling_id,customer_hashed_ip'.split(','), trim);\n\n    /* Create a array of attributes striping any empty strings */\n    allAttr = _.without(pageAttr.concat(userAttr), '');\n\n    /* Configuration settings */\n    keepCase = 'false' === 'true';\n    omitKeys = 'undefined'.split(',');\n\n    /* Resolve Prefix */\n    prefix = libUtil.resolvePrefix('undefined', 'undefined',\n        'undefined');\n\n    /* Function to varify if attribute should be used */\n    isAllowed = function(value, whitelist) {\n        var i, len, str, x;\n        str = \"\" + value;\n        if (!((value != null) && str.length > 0)) {\n            return false;\n        }\n        for (i = 0, len = whitelist.length; i < len; i++) {\n            x = whitelist[i];\n            if (value.match(x) != null) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /* Get a full list of attributes usting the dataLayer tool */\n    attributes = dataLayerIngester(dataObj, {\n        omitKeys: libUtil.removeFalsyStrings(omitKeys.concat(libUtil.EXCLUDE_KEYS_CONFIG)),\n        omitValues: libUtil.EXCLUDE_VALUES_CONFIG,\n        caseSensitive: keepCase,\n        useFullPath: 'false' === 'true',\n        useLastValue: 'false' === 'true',\n        customDelimited: [/./],\n        altDelimiter: ',',\n        userKeys: _.map(userAttr, function(exp) {\n            return new RegExp(\"(^|\\\\.)\" + exp + \"$\");\n        }),\n        optimizeNames: true\n    });\n\n    /* Only set Attributes in the allowed list */\n    allowedList = _.map(allAttr, function(name) {\n        return new RegExp(\"(_attr_|_attr_\" + prefix + \"|\\\\.)\" + (keepCase ?\n            name : libUtil.normalizeAttrName(name, {\n                removeDot: false\n            })) + \"$\");\n    });\n    toSet = {};\n    for (attr in attributes) {\n        if (!hasProp.call(attributes, attr)) continue;\n        value = attributes[attr];\n        if (isAllowed(attr, allowedList)) {\n            toSet[attr] = value;\n        }\n    }\n    toSet = Krux('prefix:attr', toSet, prefix);\n    Krux('set', toSet);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["andNot",["contains","$url","uo-dev.urbn.com/"]]]],"collects_data":true}],"usermatch_tags":[],"link":{"adslots":{},"bidders":{}}};
  
  for (var i = 0, tags = config.tags, len = tags.length, tag; (tag = tags[i]); ++i) {
    if (String(tag.id) in cs) {
      tag.content = cs[tag.id];
    }
  }

  
  var esiGeo = String(function(){/*
   <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = w.JSON.parse(esiGeo);
    } catch (__) {
      
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }



  var proxy = (window.Krux && window.Krux.q && window.Krux.q[0] && window.Krux.q[0][0] === 'proxy');

  if (!proxy || true) {
    

  load('//cdn.krxd.net/ctjs/controltag.js.0631b7d64dbbd3656a8b7368ad227a04', function() {
    log('Loaded stable controltag resource');
    Krux('config', config);
  });

  }

})(window, (function() {
  var obj = {};
  
  return obj;
})());
